version: '3.4'

# Common Django template for Geonode, Celery and Celerycam services below
x-common-django:
  &default-common-django
  build:
    context: docker
  environment:
    # editable in .env
    - HTTPS_HOST=${HTTPS_HOST}
    - HTTPS_PORT=${HTTPS_PORT}
    - HTTP_HOST=${HTTP_HOST}
    - HTTP_PORT=${HTTP_PORT}
    - ADMIN_USERNAME=${ADMIN_USERNAME}
    - ADMIN_PASSWORD=${ADMIN_PASSWORD}
    - ADMIN_EMAIL=${ADMIN_EMAIL}
    - GEOSERVER_ADMIN_USER=${ADMIN_USERNAME}
    - GEOSERVER_ADMIN_PASSWORD=${ADMIN_PASSWORD}
    - REGISTRATION_OPEN=${REGISTRATION_OPEN}
    - TIME_ZONE=${TIME_ZONE}
    - ALLOWED_HOSTS=['nginx','127.0.0.1','localhost','$HTTPS_HOST','$HTTP_HOST']
    - SECRET_KEY=${SECRET_KEY}
    # data
    ## -- comment to disable postgis ingestion of uploaded shapefiles
    - DEFAULT_BACKEND_UPLOADER=geonode.importer
    - DEFAULT_BACKEND_DATASTORE=datastore
    # database info, ${variables} are read from .env
    - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    - GEONODE_DATABASE=${GEONODE_DATABASE}
    - GEONODE_DATABASE_PASSWORD=${GEONODE_DATABASE_PASSWORD}
    - GEONODE_GEODATABASE=${GEONODE_GEODATABASE}
    - GEONODE_GEODATABASE_PASSWORD=${GEONODE_GEODATABASE_PASSWORD}
    - DATABASE_URL=postgis://${GEONODE_DATABASE_USER}:${GEONODE_DATABASE_PASSWORD}@postgres:5432/${GEONODE_DATABASE}
    - GEODATABASE_URL=postgis://${GEONODE_GEODATABASE_USER}:${GEONODE_GEODATABASE_PASSWORD}@postgres:5432/${GEONODE_GEODATABASE}
    # hardcoded
    - DEBUG=False
    - DJANGO_SETTINGS_MODULE=core.settings.base
    - BROKER_URL=amqp://rabbitmq:5672
    - STATIC_ROOT=/home/web/static/
    - MEDIA_ROOT=/home/web/media/
    - STATIC_URL=/static/
    - MEDIA_URL=/uploaded/
    - GEOSERVER_LOCATION=http://nginx/geoserver/
    - ASYNC_SIGNALS=True
    - SESSION_EXPIRED_CONTROL_ENABLED=False
    - MONITORING_ENABLED=False
    - PYTHONPATH=/home/web/django_project:/spcgeonode
    # for gep configuration
    - GEP_TITLE=Somalia Electrification Programme
    - GEP_SHORT_TITLE=SEP
    - SDI_TITLE=Somalia Electrification Platform SDI
  volumes:
    - ../django_project:/home/web/django_project
    - ./volumes/static:/home/web/static:rw
    - ./volumes/media:/home/web/media:rw
  restart: on-failure

services:
  # Vanilla RabbitMQ service. This is needed by celery
  rabbitmq:
    image: rabbitmq:3.7-alpine
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    restart: on-failure

  # postfix with smtp authentication (sasldb) TLS and OpenDKIM support are optional
  smtp:
    image: catatnight/postfix
    environment:
      maildomain: kartoza.com
      smtp_user: noreply:docker
    restart: unless-stopped

  # Our custom django application. It includes Geonode.
  django:
    <<: *default-common-django
    entrypoint: ["/entrypoint.sh"]
    command: 'uwsgi --ini /uwsgi.conf'

  nginx:
    image: geonode/spcgeonode:nginx-3.2
    hostname: nginx
    build: ./nginx/
    environment:
      - HTTPS_HOST=${HTTPS_HOST}
      - HTTP_HOST=${HTTP_HOST}
      - HTTPS_PORT=${HTTPS_PORT}
      - HTTP_PORT=${HTTP_PORT}
      - LETSENCRYPT_MODE=${LETSENCRYPT_MODE}
      - RESOLVER=127.0.0.11
    volumes:
      - ./volumes/logs:/var/log/nginx
      - ./volumes/static:/home/web/static:ro
      - ./volumes/media:/home/web/media:ro
      - ../frontend/explorer/dist:/frontend/:ro
      - certificates:/spcgeonode-certificates/
    ports:
      - "${HTTP_PORT}:80"
      - "${HTTPS_PORT}:443"
    restart: unless-stopped

  # Geoserver backend
  geoserver:
    image: geonode/spcgeonode:geoserver-3.0
    healthcheck:
      test: "curl --fail --silent --write-out 'HTTP CODE : %{http_code}\n' --output /dev/null http://127.0.0.1:8080/geoserver/rest/workspaces/geonode.html"
      interval: 60s
      timeout: 10s
      retries: 1
      start_period: 60s
    environment:
      - HTTPS_HOST=${HTTPS_HOST}
      - HTTPS_PORT=${HTTPS_PORT}
      - HTTP_HOST=${HTTP_HOST}
      - HTTP_PORT=${HTTP_PORT}
      - ADMIN_USERNAME=${ADMIN_USERNAME}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - DATABASE_URL=postgres://${GEONODE_DATABASE_USER}:${GEONODE_DATABASE_PASSWORD}@postgres:5432/${GEONODE_DATABASE}
      - GEODATABASE_URL=postgis://${GEONODE_GEODATABASE_USER}:${GEONODE_GEODATABASE_PASSWORD}@postgres:5432/${GEONODE_GEODATABASE}
    volumes:
      - geodatadir:/spcgeonode-geodatadir/
    restart: on-failure

  # PostGIS database.
  postgres:
    # use geonode official postgis 10 image
    image: geonode/postgis:10
    environment:
      # database info, ${variables} are read from .env
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - GEONODE_DATABASE=${GEONODE_DATABASE}
      - GEONODE_DATABASE_PASSWORD=${GEONODE_DATABASE_PASSWORD}
      - GEONODE_GEODATABASE=${GEONODE_GEODATABASE}
      - GEONODE_GEODATABASE_PASSWORD=${GEONODE_GEODATABASE_PASSWORD}
      - DATABASE_URL=postgres://${GEONODE_DATABASE_USER}:${GEONODE_DATABASE_PASSWORD}@postgres:5432/${GEONODE_DATABASE}
      - GEODATABASE_URL=postgis://${GEONODE_GEODATABASE_USER}:${GEONODE_GEODATABASE_PASSWORD}@postgres:5432/${GEONODE_GEODATABASE}
    volumes:
      - database:/var/lib/postgresql/data/
    restart: on-failure

  # Celery worker that executes celery tasks created by Django.
  celery:
    <<: *default-common-django
    command: 'celery worker --app=geonode.celery_app:app -l debug'
  # Celery beat that triggers scheduled tasks

  celerybeat:
    <<: *default-common-django
    command: 'celery beat --app=geonode.celery_app:app --pidfile="/celerybeat.pid" -l debug'

  # Celery camera that monitors celery tasks and populate the djcelery django admin interface
  celerycam:
    <<: *default-common-django
    command: 'celery events --app=geonode.celery_app:app --pidfile="/celeryev.pid" --camera=django_celery_monitor.camera.Camera --frequency=2.0 -l debug'

  # Gets and installs letsencrypt certificates
  letsencrypt:
    image: geonode/spcgeonode:letsencrypt-3.0
    environment:
      - HTTPS_HOST=${HTTPS_HOST}
      - HTTP_HOST=${HTTP_HOST}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - LETSENCRYPT_MODE=${LETSENCRYPT_MODE}
    volumes:
      - certificates:/spcgeonode-certificates/
    restart: on-failure

  # dumps the non geodata db
  pgdumper_nogeo:
    container_name: dumper_${GEONODE_DATABASE}_${COMPOSE_PROJECT_NAME}
    image: geonode/spcgeonode:pgdumper-3.0
    volumes:
      - pgdumps:/spcgeonode-pgdumps/
    restart: on-failure
    environment:
      - DATABASE=${GEONODE_DATABASE}
      - DATABASE_URL=postgres://${GEONODE_DATABASE_USER}:${GEONODE_DATABASE_PASSWORD}@postgres:5432/${GEONODE_DATABASE}

  # dumps the geodata db
  pgdumper_geo:
    container_name: dumper_${GEONODE_GEODATABASE}_${COMPOSE_PROJECT_NAME}
    image: geonode/spcgeonode:pgdumper-3.0
    volumes:
      - pgdumps:/spcgeonode-pgdumps/
    restart: on-failure
    environment:
      - DATABASE=${GEONODE_GEODATABASE}
      # pgdumper needs postgres:// as connection string for the geodatabase
      - DATABASE_URL=postgres://${GEONODE_GEODATABASE_USER}:${GEONODE_GEODATABASE_PASSWORD}@postgres:5432/${GEONODE_GEODATABASE}

  # django application for development
  dev:
    <<: *default-common-django
    build:
      context: ./docker/
      dockerfile: Dockerfile-dev
    ports:
      # for django test server
      - "5002:8080"
      # for ssh
      - "5003:22"

volumes:
  database:
  geodatadir:
  certificates:
  pgdumps:
  rabbitmq:
